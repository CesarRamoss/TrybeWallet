{"ast":null,"code":"var _jsxFileName = \"/home/cesar/Documentos/Trybe/Projetos para entrega/sd-017-project-trybewallet/src/components/Form.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { addItem, getExpenseThunk } from '../actions/index';\nimport getCurrentCoins from '../services/walletAPI';\n\nclass Form extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = _ref => {\n      let {\n        target\n      } = _ref;\n      const {\n        id,\n        value\n      } = target; // condicao para add o value como number do campo input\n\n      if (id === 'value') {\n        this.setState({\n          [id]: Number(value)\n        });\n      } else {\n        this.setState({\n          [id]: value\n        });\n      }\n    };\n\n    this.addRegister = async e => {\n      e.preventDefault();\n      const {\n        dispatchSetData,\n        expenses\n      } = this.props;\n      const resultAPI = await getCurrentCoins(); // atualiza o estado do componente com as chaves abaixo e despacha\n\n      this.setState({\n        exchangeRates: resultAPI,\n        id: expenses.length\n      });\n      const result = expenses.reduce((acc, item) => {\n        const value = item.value * item.exchangeRates[item.currency].ask;\n        return acc + result;\n      }, 0);\n      console.log(result);\n      dispatchSetData(this.state); // function getTotal(total, item) {\n      //   return (total + item.value);\n      // }\n      // const soma = expenses.reduce(getTotal, 0);\n      // console.log(soma);\n    };\n\n    this.state = {\n      id: 0,\n      value: 0,\n      description: '',\n      wallet: '',\n      payment: '',\n      tag: '',\n      exchangeRates: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dispatchSetCoins\n    } = this.props;\n    dispatchSetCoins();\n  } // funcao generica para adicionar os dados de input ao estado do componente\n\n\n  render() {\n    const {\n      currencies\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.addRegister,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, \"Valor\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"value\",\n      \"data-testid\": \"value-input\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, ' ', \"Descri\\xE7\\xE3o\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"description\",\n      \"data-testid\": \"description-input\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"wallet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, ' ', \"Moeda\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"currency-input\",\n      id: \"wallet\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, currencies.map(i => /*#__PURE__*/React.createElement(\"option\", {\n      key: i,\n      value: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 38\n      }\n    }, i)))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, ' ', \"M\\xE9todo de Pagamento\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"method-input\",\n      id: \"payment\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \"Dinheiro\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, \"Cart\\xE3o de Cr\\xE9dito\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, \"Cart\\xE3o de D\\xE9bito\"))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, ' ', \"Tag\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"tag-input\",\n      id: \"tag\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, \"Alimenta\\xE7\\xE3o\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, \"Lazer\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \"Trabalho\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, \"Transporte\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"Sa\\xFAde\"))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, \"Adicionar Despesa\"));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchSetData: value => dispatch(addItem(value)),\n  dispatchSetCoins: value => dispatch(getExpenseThunk(value))\n});\n\nconst mapStateToProps = state => ({\n  totalExpense: state.wallet.totalExpense,\n  expenses: state.wallet.expenses,\n  currencies: state.wallet.currencies\n});\n\nForm.propTypes = {\n  currencies: propTypes.object\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","map":{"version":3,"sources":["/home/cesar/Documentos/Trybe/Projetos para entrega/sd-017-project-trybewallet/src/components/Form.js"],"names":["React","connect","propTypes","addItem","getExpenseThunk","getCurrentCoins","Form","Component","constructor","handleChange","target","id","value","setState","Number","addRegister","e","preventDefault","dispatchSetData","expenses","props","resultAPI","exchangeRates","length","result","reduce","acc","item","currency","ask","console","log","state","description","wallet","payment","tag","componentDidMount","dispatchSetCoins","render","currencies","map","i","mapDispatchToProps","dispatch","mapStateToProps","totalExpense","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { addItem, getExpenseThunk } from '../actions/index';\nimport getCurrentCoins from '../services/walletAPI';\n\nclass Form extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: 0,\n      description: '',\n      wallet: '',\n      payment: '',\n      tag: '',\n      exchangeRates: [],\n    };\n  }\n\n  componentDidMount() {\n    const { dispatchSetCoins } = this.props;\n    dispatchSetCoins();\n  }\n\n  // funcao generica para adicionar os dados de input ao estado do componente\n  handleChange = ({ target }) => {\n    const { id, value } = target;\n    // condicao para add o value como number do campo input\n    if (id === 'value') {\n      this.setState({ [id]: Number(value) });\n    } else {\n      this.setState({ [id]: value });\n    }\n  }\n\n  // funcao para adicionar o estado do componente ao global\n  addRegister = async (e) => {\n    e.preventDefault();\n    const { dispatchSetData, expenses } = this.props;\n\n    const resultAPI = await getCurrentCoins();\n\n    // atualiza o estado do componente com as chaves abaixo e despacha\n    this.setState({ exchangeRates: resultAPI, id: expenses.length });\n    const result = expenses.reduce((acc, item) => {\n      const value = item.value * item.exchangeRates[item.currency].ask;\n      return acc + result;\n    }, 0);\n    console.log(result);\n    dispatchSetData(this.state);\n\n    // function getTotal(total, item) {\n    //   return (total + item.value);\n    // }\n    // const soma = expenses.reduce(getTotal, 0);\n\n    // console.log(soma);\n  }\n\n  render() {\n    const { currencies } = this.props;\n    return (\n      <form onSubmit={ this.addRegister }>\n        <label htmlFor=\"value\">\n          { }\n          Valor\n          <input\n            type=\"number\"\n            id=\"value\"\n            data-testid=\"value-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"description\">\n          { ' ' }\n          Descrição\n          <input\n            type=\"text\"\n            id=\"description\"\n            data-testid=\"description-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"wallet\">\n          { ' ' }\n          Moeda\n          <select data-testid=\"currency-input\" id=\"wallet\" onChange={ this.handleChange }>\n            {\n              currencies.map((i) => (<option key={ i } value={ i }>{ i }</option>))\n            }\n          </select>\n        </label>\n        <label htmlFor=\"payment\">\n          { ' ' }\n          Método de Pagamento\n          <select data-testid=\"method-input\" id=\"payment\" onChange={ this.handleChange }>\n            <option>Dinheiro</option>\n            <option>Cartão de Crédito</option>\n            <option>Cartão de Débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          { ' ' }\n          Tag\n          <select data-testid=\"tag-input\" id=\"tag\" onChange={ this.handleChange }>\n            <option>Alimentação</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n        </label>\n        <button type=\"submit\">Adicionar Despesa</button>\n\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSetData: (value) => dispatch(addItem(value)),\n  dispatchSetCoins: (value) => dispatch(getExpenseThunk(value)),\n});\n\nconst mapStateToProps = (state) => ({\n  totalExpense: state.wallet.totalExpense,\n  expenses: state.wallet.expenses,\n  currencies: state.wallet.currencies,\n});\n\nForm.propTypes = {\n  currencies: propTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n"]},"metadata":{},"sourceType":"module"}