{"version":3,"sources":["img/wallet.png","img/trash.svg","lib/constants.js","services/walletAPI.js","pages/Login.js","actions/index.js","components/Form.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","VALIDATE_EMAIL","getCurrentCoins","a","fetch","response","json","result","Login","props","handleSubmit","e","preventDefault","email","state","login","history","push","loginButtonDisabled","password","this","verifyCharacters","length","verifyEmail","test","setState","className","src","wallet","alt","onSubmit","type","data-testid","placeholder","onChange","target","value","changeStateButton","required","disabled","React","Component","connect","dispatch","loginAction","Form","handleChange","id","addRegister","dispatchSetData","description","currency","method","tag","dispatchSetCoins","currencies","htmlFor","map","i","key","expenses","exchangeRates","addItem","array","Object","keys","filter","console","error","message","Table","deleteItem","dispatchDelete","element","Number","toFixed","name","split","shift","ask","onClick","trash","Wallet","reduce","acc","item","user","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","loginReducer","action","walletReducer","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.99ad5049.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallet.44103b8a.png\";","module.exports = __webpack_public_path__ + \"static/media/trash.e3a911a6.svg\";","export const MIN_CHARACTER = 5;\nexport const VALIDATE_EMAIL = /\\S+@\\S+\\.\\S+/;\nexport const TAG_INITIAL = 'Alimentação';\n","const WALLET_API = 'https://economia.awesomeapi.com.br/json/all';\n\nconst getCurrentCoins = async () => {\n  const response = await fetch(WALLET_API);\n  const result = await response.json();\n  return result;\n};\n\nexport default getCurrentCoins;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { MIN_CHARACTER, VALIDATE_EMAIL } from '../lib/constants';\nimport { login as loginAction } from '../actions';\nimport wallet from '../img/wallet.png';\nimport '../css/login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      loginButtonDisabled: true,\n      password: '',\n    };\n  }\n\n  handleSubmit =(e) => {\n    e.preventDefault();\n    const { email } = this.state;\n    const { login, history } = this.props;\n    login({ email });\n    history.push('/carteira');\n  }\n\n  // funcao criada para validar o enable do button\n  changeStateButton() {\n    const { email, password } = this.state;\n    const verifyCharacters = password.length >= MIN_CHARACTER;\n\n    // referencia para pesquisa: https://www.horadecodar.com.br/2020/09/13/como-validar-email-com-javascript/\n    const verifyEmail = VALIDATE_EMAIL.test(email);\n\n    if (verifyCharacters && verifyEmail) {\n      this.setState({ loginButtonDisabled: false });\n    } else {\n      this.setState({ loginButtonDisabled: true });\n    }\n  }\n\n  render() {\n    const { loginButtonDisabled } = this.state;\n    return (\n      <div className=\"container\">\n        <main>\n          <h1>TrybeWallet</h1>\n          <img src={ wallet } alt=\"Wallet\" />\n          <form onSubmit={ this.handleSubmit }>\n            <input\n              type=\"email\"\n              data-testid=\"email-input\"\n              placeholder=\"Digite seu email\"\n              onChange={ (e) => {\n                this.setState({ email: e.target.value });\n                this.changeStateButton();\n              } }\n              required\n            />\n            <input\n              type=\"password\"\n              data-testid=\"password-input\"\n              placeholder=\"Digite uma senha\"\n              onChange={ (e) => {\n                this.setState({ password: e.target.value });\n                this.changeStateButton();\n              } }\n              required\n            />\n            <button type=\"submit\" disabled={ loginButtonDisabled }>Entrar</button>\n          </form>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  login: (value) => dispatch(loginAction(value)),\n});\n\nLogin.propTypes = {\n  login: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import getCurrentCoins from '../services/walletAPI';\n\nexport const LOGIN_TYPE = 'LOGIN';\nexport const DELETE_EXPENSE_TYPE = 'DELETE_EXPENSE';\nexport const ADD_EXPENSE_TYPE = 'ADD_EXPENSE';\nexport const GET_EXPENSE_TYPE = 'GET_EXPENSE';\n\nexport const login = (value) => ({ type: LOGIN_TYPE, value });\nexport const deleteItem = (value) => ({ type: DELETE_EXPENSE_TYPE, value });\n\n// funcao acionada ao submit do form\nexport const addItem = (value) => async (dispatch) => {\n  const result = await getCurrentCoins();\n  dispatch({\n    type: ADD_EXPENSE_TYPE,\n    value: {\n      ...value,\n      exchangeRates: result,\n    },\n  });\n};\n\n// funcao para add o currencies chamado pelo thunk\nexport const getExpense = (value) => ({ type: GET_EXPENSE_TYPE, value });\n\n// thunk recebe uma funcao que retorna uma funcao\nexport const getExpenseThunk = () => async (dispatch) => {\n  try {\n    const response = await getCurrentCoins();\n    const array = Object.keys(response).filter((currency) => currency !== 'USDT');\n    // console.log(response);\n    dispatch(getExpense(array));\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { addItem, getExpenseThunk } from '../actions/index';\nimport { TAG_INITIAL } from '../lib/constants';\n\nclass Form extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: TAG_INITIAL,\n    };\n  }\n\n  componentDidMount() {\n    const { dispatchSetCoins } = this.props;\n    dispatchSetCoins();\n  }\n\n  // funcao generica para adicionar os dados de input ao estado do componente\n  handleChange = ({ target }) => {\n    const { id, value } = target;\n\n    this.setState({ [id]: value });\n  }\n\n  // funcao para adicionar o estado do componente ao global\n  addRegister = (e) => {\n    e.preventDefault();\n    const { dispatchSetData } = this.props;\n    dispatchSetData(this.state);\n    this.setState({\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: TAG_INITIAL,\n    });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <form onSubmit={ this.addRegister }>\n        <label htmlFor=\"value\">\n          { }\n          Valor\n          <input\n            type=\"number\"\n            id=\"value\"\n            data-testid=\"value-input\"\n            onChange={ this.handleChange }\n            value={ value }\n          />\n        </label>\n        <label htmlFor=\"description\">\n          { ' ' }\n          Descrição\n          <input\n            type=\"text\"\n            id=\"description\"\n            data-testid=\"description-input\"\n            onChange={ this.handleChange }\n            value={ description }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          { ' ' }\n          Moeda\n          <select\n            data-testid=\"currency-input\"\n            id=\"currency\"\n            onChange={ this.handleChange }\n            value={ currency }\n          >\n            {\n              currencies.map((i) => (<option key={ i } value={ i }>{ i }</option>))\n            }\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          { ' ' }\n          Método de Pagamento\n          <select\n            data-testid=\"method-input\"\n            id=\"method\"\n            onChange={ this.handleChange }\n            value={ method }\n          >\n            <option>Dinheiro</option>\n            <option>Cartão de crédito</option>\n            <option>Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          { ' ' }\n          Tag\n          <select\n            data-testid=\"tag-input\"\n            id=\"tag\"\n            onChange={ this.handleChange }\n            value={ tag }\n          >\n            <option>Alimentação</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n        </label>\n        <button type=\"submit\">Adicionar</button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSetData: (value) => dispatch(addItem(value)),\n  dispatchSetCoins: (value) => dispatch(getExpenseThunk(value)),\n});\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  currencies: state.wallet.currencies,\n});\n\nForm.propTypes = {\n  currencies: propTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteItem } from '../actions';\nimport trash from '../img/trash.svg';\n\n// material estudado para split e shift: https://pt.stackoverflow.com/questions/216333/split-regex-apenas-na-primeira-barra-vertical\n\nclass Table extends React.Component {\n  deleteItem =({ target }) => {\n    const { dispatchDelete } = this.props;\n    dispatchDelete(target.value);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expenses.map((element) => (\n            <tr key={ element.id }>\n              <td>{element.description}</td>\n              <td>{element.tag}</td>\n              <td>{element.method}</td>\n              <td>{Number(element.value).toFixed(2)}</td>\n              <td>{(element.exchangeRates[element.currency].name).split('/').shift()}</td>\n              <td>{Number(element.exchangeRates[element.currency].ask).toFixed(2)}</td>\n              <td>\n                {Number(element.value * element.exchangeRates[element.currency].ask)\n                  .toFixed(2)}\n\n              </td>\n              <td>Real</td>\n              <td>\n                <button\n                  className=\"delete\"\n                  type=\"button\"\n                  data-testid=\"delete-btn\"\n                  onClick={ this.deleteItem }\n                  value={ element.id }\n                >\n                  <img src={ trash } alt=\"trash\" />\n                </button>\n              </td>\n\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchDelete: (value) => dispatch(deleteItem(value)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Form from '../components/Form';\nimport Table from '../components/Table';\nimport '../css/wallet.css';\nimport wallet from '../img/wallet.png';\n\nclass Wallet extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    return (\n      <div className=\"container_wallet\">\n        <header>\n          <img src={ wallet } alt=\"Wallet\" />\n          <nav>\n            <ul>\n              <li data-testid=\"email-field\">{ email }</li>\n              <li data-testid=\"total-field\">\n                <span>Total: </span>\n                {expenses.reduce((acc, item) => {\n                  const valor = Number(item.value)\n                    * Number(item.exchangeRates[item.currency].ask);\n                  return acc + valor;\n                }, 0).toFixed(2)}\n              </li>\n              <li data-testid=\"header-currency-field\">\n                <span>Moeda: </span>\n                BRL\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <Form />\n        <Table />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nWallet.propTypes = {\n  email: PropTypes.string,\n  expenses: PropTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOGIN_TYPE } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction loginReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN_TYPE: {\n    const { email } = action.value;\n    return { email };\n  }\n  default:\n    return state;\n  }\n}\n\nexport default loginReducer;\n","import { ADD_EXPENSE_TYPE, GET_EXPENSE_TYPE, DELETE_EXPENSE_TYPE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nfunction walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ADD_EXPENSE_TYPE:\n    return {\n      ...state,\n      expenses: [...state.expenses, { id: state.expenses.length, ...action.value }],\n\n    };\n  case GET_EXPENSE_TYPE:\n    return {\n      ...state,\n      currencies: action.value,\n    };\n\n  case DELETE_EXPENSE_TYPE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((item) => item.id !== Number(action.value)),\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducers = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducers from '../reducers';\n\nconst store = createStore(\n  rootReducers,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}